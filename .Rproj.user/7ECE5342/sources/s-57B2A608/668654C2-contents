#' A function to fit the generalized additive models to compare different types of predicted components
#' This function loads the saved RData file generated by data_application function
#' @export gam_application
#' @param which_ear Either "right" or "left" to choose which ear of data is loaded
#' @return A list of 9 GAM model fits and the adjusted R-square table whose number of rows depend on the num_knot of the saved real_data_app_right, or left, RData file
#' @importFrom mgcv bam
#' @importFrom stats prcomp


gam_application <- function(which_ear = "right"){

  ### 1. Read in data


  real_data <- read_real_data(select_ear = which_ear)
  data_ready <- real_data$data_ready
  AUXTYM_I <- real_data$AUXTYM_I

  if(which_ear == "right"){
    all_tymp_data <- AUXTYM_I[AUXTYM_I$TYXPEAR==1, ]
    load("real_data_app_right.RData")
  } else if(which_ear == "left"){
    all_tymp_data <- AUXTYM_I[AUXTYM_I$TYXPEAR==2, ]
    load("real_data_app_left.RData")
  }

  common_ids_tymp <- intersect(all_tymp_data$SEQN, data_ready$SEQN)
  subset <- (all_tymp_data$SEQN %in% common_ids_tymp)

  tymp_data <- all_tymp_data[subset, ]
  # subjects who have both WBA and tympanometry
  tymp_data_noNA <- na.exclude( tymp_data[ , c(1, which(names(tymp_data) == "TYXP001") : which(names(tymp_data) == "TYXP135"), which(names(tymp_data) == "TYXA001") : which(names(tymp_data) == "TYXA135"))] )
  # Exclude observations including missing values
  pressure_noNA <- tymp_data_noNA[ , which(names(tymp_data_noNA) == "TYXP001") : which(names(tymp_data_noNA) == "TYXP135")]
  # Grid points
  compliance_noNA <- tymp_data_noNA[ , which(names(tymp_data_noNA) == "TYXA001") : which(names(tymp_data_noNA) == "TYXA135")]
  # Functional responses

  loc_id_vec <- rep(0, length(tymp_data_noNA$SEQN))

  pressure_std <- -(pressure_noNA -199) * 1/(498)
  for( i in 1:length(tymp_data_noNA$SEQN)){
    loc_id_vec[i] <- which(  data_ready$SEQN == tymp_data_noNA$SEQN[i] )
  }
  # vector of order number to match two datasets


  ### 2. Prepare for recording
  blup_mat <- as.matrix(results_list[[1]]$Blup_pred_com)
  num_subject <- dim(blup_mat)[2]
  len_results_list <- length(results_list)
  # the total number of knot settings used in data_application function

  record_mat <- matrix(0, len_results_list, 9)

  gam_results_list <- list()

for(i in 1:len_results_list){
  cat(i, "th iteraton \n")

  # 1. Functional  only
  scores_functional <- results_list[[i]]$fit_face$scores[,1:3]
  design_mat <- cbind(rep(1, num_subject) ,scores_functional )
  design_mat_reorder <- design_mat[loc_id_vec, ]

  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  colnames(mat) <- c("x1", "x2", "x3", "x4")
  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))

  colnames(data_vectorization)

  print("fit_1")

  gam_fit_1 <- bam(vectorized_y ~
                     s(vectorized_t) +
                     s(vectorized_t, by=x2) +
                     s(vectorized_t, by=x3) +
                     s(vectorized_t, by=x4)   , data=data_vectorization  )

  record_mat[i,1] <- as.numeric(summary(gam_fit_1)[10])

  # 2. Multivariate ony
  pca_multivariate <- prcomp(z_sample_std_mat, center = FALSE, scale=FALSE )
  scores_multivariate <- pca_multivariate$x[, 1:3]

  design_mat <- cbind(rep(1, num_subject) , scores_multivariate )
  design_mat_reorder <- design_mat[loc_id_vec, ]



  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  colnames(mat) <- c("x1", "x2", "x3", "x4")
  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))

  print("fit_2")

  gam_fit_2 <- bam(vectorized_y ~
                     s(vectorized_t) +
                     s(vectorized_t, by=x2) +
                     s(vectorized_t, by=x3) +
                     s(vectorized_t, by=x4)   , data=data_vectorization  )

  summary(gam_fit_2)
  record_mat[i,2] <- as.numeric(summary(gam_fit_2)[10])

  # 6. Functional+ Multivariate
  scores_f3PlusM3 <- cbind(scores_functional[,1:3], pca_multivariate$x[, 1:3])

  design_mat <- cbind(rep(1, num_subject) , scores_f3PlusM3 )
  design_mat_reorder <- design_mat[loc_id_vec, ]

  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7")
  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))

  print("fit_6")

  gam_fit_6 <- bam(vectorized_y ~
                     s(vectorized_t) +
                     s(vectorized_t, by=x2) +
                     s(vectorized_t, by=x3) +
                     s(vectorized_t, by=x4) +
                     s(vectorized_t, by=x5) +
                     s(vectorized_t, by=x6) +
                     s(vectorized_t, by=x7)   , data=data_vectorization  )


  record_mat[i,6] <- as.numeric(summary(gam_fit_6)[10])


  # 3. mBLUP common

  score_common_new <- t( results_list[[i]]$Blup_pred_com )

  if(dim(score_common_new)[2]==2){
    design_mat <- cbind(rep(1, num_subject) , score_common_new )

    design_mat_reorder <- design_mat[loc_id_vec, ]

    # Vectorization
    vectorized_y <- c(t(as.matrix(compliance_noNA)))
    vectorized_t <- c(t(as.matrix(pressure_noNA)))
    vectorized_t_std <- c(t(  pressure_std  ))
    mat  <- apply(design_mat_reorder,2, rep, each=135)
    colnames(mat) <- c("x1", "x2", "x3")
    data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
    data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))

    print("fit_3")

    gam_fit_3 <- bam(vectorized_y ~
                       s(vectorized_t) +
                       s(vectorized_t, by=x2) +
                       s(vectorized_t, by=x3)   , data=data_vectorization  )
  } else {

    design_mat <- cbind(rep(1, num_subject) , score_common_new[,1:3] )
    design_mat_reorder <- design_mat[loc_id_vec, ]



    # Vectorization
    vectorized_y <- c(t(as.matrix(compliance_noNA)))
    vectorized_t <- c(t(as.matrix(pressure_noNA)))
    vectorized_t_std <- c(t(  pressure_std  ))
    mat  <- apply(design_mat_reorder,2, rep, each=135)
    colnames(mat) <- c("x1", "x2", "x3", "x4")
    data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
    data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))

    print("fit_3")

    gam_fit_3 <- bam(vectorized_y ~
                       s(vectorized_t) +
                       s(vectorized_t, by=x2) +
                       s(vectorized_t, by=x3) +
                       s(vectorized_t, by=x4)   , data=data_vectorization  )
  }
  record_mat[i,3] <- as.numeric(summary(gam_fit_3)[10])


  # 4. mBLUP for independent functional data
  score_functional_ind_new <- t( results_list[[i]]$Blup_pred_ind_func )
  design_mat <- cbind(rep(1, num_subject) , score_functional_ind_new[,1:3] )
  design_mat_reorder <- design_mat[loc_id_vec, ]

  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  colnames(mat) <- c("x1", "x2", "x3", "x4")
  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))


  print("fit_4")

  gam_fit_4 <- bam(vectorized_y ~
                      s(vectorized_t) +
                      s(vectorized_t, by=x2) +
                      s(vectorized_t, by=x3) +
                      s(vectorized_t, by=x4)   , data=data_vectorization  )


  record_mat[i,4] <- as.numeric(summary(gam_fit_4)[10])





  # 5. mBLUP for independent multivariate data
  score_multivariate_ind_new <- t( results_list[[i]]$Blup_pred_ind_multi )
  design_mat <- cbind(rep(1, num_subject) , score_multivariate_ind_new[,1:3] )
  design_mat_reorder <- design_mat[loc_id_vec, ]



  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  colnames(mat) <- c("x1", "x2", "x3", "x4")
  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))


  print("fit_5")

  gam_fit_5 <- bam(vectorized_y ~
                      s(vectorized_t) +
                      s(vectorized_t, by=x2) +
                      s(vectorized_t, by=x3) +
                      s(vectorized_t, by=x4)   , data=data_vectorization  )


  record_mat[i,5] <- as.numeric(summary(gam_fit_5)[10])



  #. 9. mBLUP for common + all Ind

  score_common_allInd_new <- cbind(score_common_new[,1:2], score_functional_ind_new[,1:2], score_multivariate_ind_new[,1:2])

  design_mat <- cbind(rep(1, num_subject) , score_common_allInd_new )
  design_mat_reorder <- design_mat[loc_id_vec, ]

  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6","x7")
  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))

  print("fit_9")

  gam_fit_9 <- bam(vectorized_y ~
                      s(vectorized_t) +
                      s(vectorized_t, by=x2) +
                      s(vectorized_t, by=x3) +
                      s(vectorized_t, by=x4) +
                      s(vectorized_t, by=x5) +
                      s(vectorized_t, by=x6) +
                      s(vectorized_t, by=x7)  , data=data_vectorization  )

  summary(gam_fit_9)
  record_mat[i,9] <- as.numeric(summary(gam_fit_9)[10])



  # 7. mBLUP for common + functional Ind
  if(dim(score_common_new)[2]==2){
    score_common_indFunc_new <- cbind(score_common_new[,1:2], score_functional_ind_new[,1:3])

  } else if(dim(score_common_new)[2]==3){
    score_common_indFunc_new <- cbind(score_common_new[,1:3], score_functional_ind_new[,1:3])

  }

  design_mat <- cbind(rep(1, num_subject) , score_common_indFunc_new )
  design_mat_reorder <- design_mat[loc_id_vec, ]

  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  if(dim(score_common_new)[2]==2){
    colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6")
  } else if(dim(score_common_new)[2]==3){
    colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6","x7")
  }
  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))

  print("fit_7")

  if(dim(score_common_new)[2]==2){
    gam_fit_7 <- bam(vectorized_y ~
                        s(vectorized_t) +
                        s(vectorized_t, by=x2) +
                        s(vectorized_t, by=x3) +
                        s(vectorized_t, by=x4) +
                        s(vectorized_t, by=x5) +
                        s(vectorized_t, by=x6)   , data=data_vectorization  )
  } else if(dim(score_common_new)[2]==3){
    gam_fit_7 <- bam(vectorized_y ~
                        s(vectorized_t) +
                        s(vectorized_t, by=x2) +
                        s(vectorized_t, by=x3) +
                        s(vectorized_t, by=x4) +
                        s(vectorized_t, by=x5) +
                        s(vectorized_t, by=x6) +
                        s(vectorized_t, by=x7)  , data=data_vectorization  )
  }


  record_mat[i,7] <- as.numeric(summary(gam_fit_7)[10])



  # 8. mBLUP for common + multivariate Ind


  if(dim(score_common_new)[2]==2){
    score_common_indMulti_new <- cbind(score_common_new[,1:2], score_multivariate_ind_new[,1:3])

  } else if(dim(score_common_new)[2]==3){
    score_common_indMulti_new <- cbind(score_common_new[,1:3], score_multivariate_ind_new[,1:3])

  }

  design_mat <- cbind(rep(1, num_subject) , score_common_indMulti_new )
  design_mat_reorder <- design_mat[loc_id_vec, ]

  # Vectorization
  vectorized_y <- c(t(as.matrix(compliance_noNA)))
  vectorized_t <- c(t(as.matrix(pressure_noNA)))
  vectorized_t_std <- c(t(  pressure_std  ))
  mat  <- apply(design_mat_reorder,2, rep, each=135)
  if(dim(score_common_new)[2]==2){
    colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6")
  } else if(dim(score_common_new)[2]==3){
    colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6","x7")
  }

  data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
  data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))



  print("fit_8")
  if(dim(score_common_new)[2]==2){
    gam_fit_8 <- bam(vectorized_y ~
                        s(vectorized_t) +
                        s(vectorized_t, by=x2) +
                        s(vectorized_t, by=x3) +
                        s(vectorized_t, by=x4) +
                        s(vectorized_t, by=x5) +
                        s(vectorized_t, by=x6)   , data=data_vectorization  )
  } else if(dim(score_common_new)[2]==3){
    gam_fit_8 <- bam(vectorized_y ~
                        s(vectorized_t) +
                        s(vectorized_t, by=x2) +
                        s(vectorized_t, by=x3) +
                        s(vectorized_t, by=x4) +
                        s(vectorized_t, by=x5) +
                        s(vectorized_t, by=x6) +
                        s(vectorized_t, by=x7)  , data=data_vectorization  )
  }


  record_mat[i,8] <- as.numeric(summary(gam_fit_8)[10])

  ########################################################################################################
  ### End of new BLUP




  gam_results_list[[i]] <- list(
    "gam_fit_1" = gam_fit_1,
    "gam_fit_2" = gam_fit_2,
    "gam_fit_3" = gam_fit_3,
    "gam_fit_4" = gam_fit_4,
    "gam_fit_5" = gam_fit_5,
    "gam_fit_6" = gam_fit_6,
    "gam_fit_7" = gam_fit_7,
    "gam_fit_8" = gam_fit_8,
    "gam_fit_9" = gam_fit_9

  )
}


colnames(record_mat) <- c("Fun", "Mul", "Com", "Fun_ind", "Mul_ind", "Fun+Mul", "Com+Fun_ind", "Com+Mul_ind", "Com+FunMul_ind")


if(which_ear == "right"){
  gam_results_list_right <- gam_results_list
  record_mat_right <- record_mat

  save(record_mat_right, gam_results_list_right,
       file="gam_application_right.RData")
} else if(which_ear == "left"){
  gam_results_list_left <- gam_results_list
  record_mat_left <- record_mat

  save(record_mat_left, gam_results_list_left,
       file="gam_application_left.RData")
}
res <- list("gam_results_list"= gam_results_list, "record_mat" = record_mat, "which_ear" = which_ear)
return( res )
} ## end of function


### Start of new BLUP
# 9. New BLUP common
score_common_new <- t( results_list[[i]]$Blup_pred_M3 )
if(dim(score_common_new)[2]==2){
design_mat <- cbind(rep(1, dim(blup_mat)[2]) , score_common_new )
design_mat_reorder <- design_mat[loc_id_vec, ]
dim(design_mat_reorder)
# Vectorization
dim(t(as.matrix(compliance_noNA)))
t(as.matrix(compliance_noNA))
vectorized_y <- c(t(as.matrix(compliance_noNA)))
vectorized_t <- c(t(as.matrix(pressure_noNA)))
vectorized_t_std <- c(t(  pressure_std  ))
mat  <- apply(design_mat_reorder,2, rep, each=135)
colnames(mat) <- c("x1", "x2", "x3")
data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))
colnames(data_vectorization)
print("fit_9")
gam_fit_9 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3)   , data=data_vectorization  )
} else {
design_mat <- cbind(rep(1, dim(blup_mat)[2]) , score_common_new )
design_mat_reorder <- design_mat[loc_id_vec, ]
dim(design_mat_reorder)
# Vectorization
dim(t(as.matrix(compliance_noNA)))
t(as.matrix(compliance_noNA))
vectorized_y <- c(t(as.matrix(compliance_noNA)))
vectorized_t <- c(t(as.matrix(pressure_noNA)))
vectorized_t_std <- c(t(  pressure_std  ))
mat  <- apply(design_mat_reorder,2, rep, each=135)
colnames(mat) <- c("x1", "x2", "x3", "x4")
data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))
colnames(data_vectorization)
print("fit_9")
gam_fit_9 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4)   , data=data_vectorization  )
}
record_mat[i,9] <- as.numeric(summary(gam_fit_9)[10])
# 10. New BLUP individual func
x_demeaned_y <- 1/sqrt(m) * ( t(y_sample) - t(results_list[[i]]$y_centered)  )
### Phi_1 <- 1/sqrt(m) * results_list[[i]]$B_tilde %*%  results_list[[i]]$svd_k1$u[,1:3]
### Blup_pred_ind_func <- diag(results_list[[i]]$svd_k1$d[1:3])  %*% solve(t(Phi_1) %*% results_list[[i]]$cov_y_sample %*% Phi_1 ) %*% t(Phi_1) %*% x_demeaned_y
Phi_1 <- 1/sqrt(m) * results_list[[i]]$B_tilde %*% results_list[[i]]$svd_k1$u[,1:3]
x_deam_new <- t(Phi_1) %*% x_demeaned_y
V_new <- x_deam_new %*% t(x_deam_new) / (n-1)
Blup_pred_ind_func <- diag( (results_list[[i]]$svd_k1$d[1:3] ) )   %*% solve(t(Phi_1) %*% results_list[[i]]$cov_y_sample %*% Phi_1 ) %*% t(Phi_1) %*% x_demeaned_y
# Blup_pred_ind_func <- diag( (results_list[[i]]$svd_k1$d[1:3] / m ) )   %*% solve( V_new ) %*% t(Phi_1) %*% x_demeaned_y
score_functional_ind_new <- t( Blup_pred_ind_func )
design_mat <- cbind(rep(1, dim(blup_mat)[2]) , score_functional_ind_new[,1:3] )
design_mat_reorder <- design_mat[loc_id_vec, ]
dim(design_mat_reorder)
# Vectorization
dim(t(as.matrix(compliance_noNA)))
t(as.matrix(compliance_noNA))
vectorized_y <- c(t(as.matrix(compliance_noNA)))
vectorized_t <- c(t(as.matrix(pressure_noNA)))
vectorized_t_std <- c(t(  pressure_std  ))
mat  <- apply(design_mat_reorder,2, rep, each=135)
colnames(mat) <- c("x1", "x2", "x3", "x4")
data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))
colnames(data_vectorization)
print("fit_10")
gam_fit_10 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4)   , data=data_vectorization  )
record_mat[i,10] <- as.numeric(summary(gam_fit_10)[10])
# 11. New BLUP individual multi
Nu_1 <- results_list[[i]]$svd_nu_k1$u[,1:3]
Blup_pred_ind_multi <- diag(results_list[[i]]$svd_nu_k1$d[1:3])  %*% solve(t(Nu_1) %*% Cov_Z %*% Nu_1 ) %*% t(Nu_1) %*% t(z_sample_std_mat)
score_multivariate_ind_new <- t( Blup_pred_ind_multi )
design_mat <- cbind(rep(1, dim(blup_mat)[2]) , score_multivariate_ind_new[,1:3] )
design_mat_reorder <- design_mat[loc_id_vec, ]
dim(design_mat_reorder)
# Vectorization
dim(t(as.matrix(compliance_noNA)))
t(as.matrix(compliance_noNA))
vectorized_y <- c(t(as.matrix(compliance_noNA)))
vectorized_t <- c(t(as.matrix(pressure_noNA)))
vectorized_t_std <- c(t(  pressure_std  ))
mat  <- apply(design_mat_reorder,2, rep, each=135)
colnames(mat) <- c("x1", "x2", "x3", "x4")
data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))
colnames(data_vectorization)
print("fit_11")
gam_fit_11 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4)   , data=data_vectorization  )
record_mat[i,11] <- as.numeric(summary(gam_fit_11)[10])
#. 12. common + all Ind
#####  two only individual for both multi and func
#  Nu_1_2 <- results_list[[i]]$svd_nu_k1$u[,1:2]
#  Blup_pred_ind_multi_2 <- diag(results_list[[i]]$svd_nu_k1$d[1:2])  %*% solve(t(Nu_1_2) %*% Cov_Z %*% Nu_1_2 ) %*% t(Nu_1_2) %*% t(z_sample_std_mat)
#  score_multivariate_ind_new_2 <- t( Blup_pred_ind_multi_2 )
#  x_demeaned_y <- 1/sqrt(m) * ( t(y_sample) - t(results_list[[i]]$y_centered)  )
#  Phi_1_2 <- 1/sqrt(m) * results_list[[i]]$B_tilde %*%  results_list[[i]]$svd_k1$u[,1:2]
#  Blup_pred_ind_func_2 <- diag(results_list[[i]]$svd_k1$d[1:2])  %*% solve(t(Phi_1_2) %*% results_list[[i]]$cov_y_sample %*% Phi_1_2 ) %*% t(Phi_1_2) %*% x_demeaned_y
#  score_functional_ind_new_2 <- t( Blup_pred_ind_func_2 )
#  score_common_allInd_new <- cbind(score_common_new[,1:2], score_functional_ind_new_2, score_multivariate_ind_new_2)
############################################################################################
## Or just used first two of previous prediction
score_common_allInd_new <- cbind(score_common_new[,1:2], score_functional_ind_new[,1:2], score_multivariate_ind_new[,1:2])
design_mat <- cbind(rep(1, dim(blup_mat)[2]) , score_common_allInd_new )
design_mat_reorder <- design_mat[loc_id_vec, ]
dim(design_mat_reorder)
# Vectorization
dim(t(as.matrix(compliance_noNA)))
t(as.matrix(compliance_noNA))
vectorized_y <- c(t(as.matrix(compliance_noNA)))
vectorized_t <- c(t(as.matrix(pressure_noNA)))
vectorized_t_std <- c(t(  pressure_std  ))
mat  <- apply(design_mat_reorder,2, rep, each=135)
colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6","x7")
data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))
colnames(data_vectorization)
print("fit_12")
gam_fit_12 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4) +
s(vectorized_t, by=x5) +
s(vectorized_t, by=x6) +
s(vectorized_t, by=x7)  , data=data_vectorization  )
summary(gam_fit_12)
record_mat[i,12] <- as.numeric(summary(gam_fit_12)[10])
#. 13. common + functional Ind
if(dim(score_common_new)[2]==2){
score_common_indFunc_new <- cbind(score_common_new[,1:2], score_functional_ind_new[,1:3])
} else if(dim(score_common_new)[2]==3){
score_common_indFunc_new <- cbind(score_common_new[,1:3], score_functional_ind_new[,1:3])
}
design_mat <- cbind(rep(1, dim(blup_mat)[2]) , score_common_indFunc_new )
design_mat_reorder <- design_mat[loc_id_vec, ]
dim(design_mat_reorder)
# Vectorization
dim(t(as.matrix(compliance_noNA)))
t(as.matrix(compliance_noNA))
vectorized_y <- c(t(as.matrix(compliance_noNA)))
vectorized_t <- c(t(as.matrix(pressure_noNA)))
vectorized_t_std <- c(t(  pressure_std  ))
mat  <- apply(design_mat_reorder,2, rep, each=135)
if(dim(score_common_new)[2]==2){
colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6")
} else if(dim(score_common_new)[2]==3){
colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6","x7")
}
data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))
print("fit_13")
if(dim(score_common_new)[2]==2){
gam_fit_13 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4) +
s(vectorized_t, by=x5) +
s(vectorized_t, by=x6)   , data=data_vectorization  )
} else if(dim(score_common_new)[2]==3){
gam_fit_13 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4) +
s(vectorized_t, by=x5) +
s(vectorized_t, by=x6) +
s(vectorized_t, by=x7)  , data=data_vectorization  )
}
record_mat[i,13] <- as.numeric(summary(gam_fit_13)[10])
#. 14. common + multivariate Ind
if(dim(score_common_new)[2]==2){
score_common_indMulti_new <- cbind(score_common_new[,1:2], score_multivariate_ind_new[,1:3])
} else if(dim(score_common_new)[2]==3){
score_common_indMulti_new <- cbind(score_common_new[,1:3], score_multivariate_ind_new[,1:3])
}
design_mat <- cbind(rep(1, dim(blup_mat)[2]) , score_common_indMulti_new )
design_mat_reorder <- design_mat[loc_id_vec, ]
dim(design_mat_reorder)
# Vectorization
dim(t(as.matrix(compliance_noNA)))
t(as.matrix(compliance_noNA))
vectorized_y <- c(t(as.matrix(compliance_noNA)))
vectorized_t <- c(t(as.matrix(pressure_noNA)))
vectorized_t_std <- c(t(  pressure_std  ))
mat  <- apply(design_mat_reorder,2, rep, each=135)
if(dim(score_common_new)[2]==2){
colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6")
} else if(dim(score_common_new)[2]==3){
colnames(mat) <- c("x1", "x2", "x3", "x4", "x5", "x6","x7")
}
data_vectorization <- as.data.frame(cbind(vectorized_y, vectorized_t, mat))
data_vectorization_std <- as.data.frame(cbind(vectorized_y, vectorized_t_std, mat))
print("fit_14")
if(dim(score_common_new)[2]==2){
gam_fit_14 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4) +
s(vectorized_t, by=x5) +
s(vectorized_t, by=x6)   , data=data_vectorization  )
} else if(dim(score_common_new)[2]==3){
gam_fit_14 <- bam(vectorized_y ~
s(vectorized_t) +
s(vectorized_t, by=x2) +
s(vectorized_t, by=x3) +
s(vectorized_t, by=x4) +
s(vectorized_t, by=x5) +
s(vectorized_t, by=x6) +
s(vectorized_t, by=x7)  , data=data_vectorization  )
}
record_mat[i,14] <- as.numeric(summary(gam_fit_14)[10])
########################################################################################################
### End of new BLUP
gam_results_list[[i]] <- list(
"gam_fit_1" = gam_fit_1,
"gam_fit_2" = gam_fit_2,
"gam_fit_3" = gam_fit_3,
"gam_fit_9" = gam_fit_9,
"gam_fit_10" = gam_fit_10,
"gam_fit_11" = gam_fit_11,
"gam_fit_12" = gam_fit_12,
"gam_fit_13" = gam_fit_13,
"gam_fit_14" = gam_fit_14
)
}
list("adf"=1:5,"df"=c("a", "b"))
aa<- list("adf"=1:5,"df"=c("a", "b"))
dim(aa)
str(aa)
str(aa)[1]
length(aa)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr=5, N=5)
library(CoFA)
simulation_study(snr=5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
getwd()
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
getwd()
simulation_study(snr= 5, N=5)
library(CoFA)
simulation_study(snr= 5, N=5)
library(CoFA)
getwd()
simulation_study(snr= 5, N=5)
library(CoFA)
getwd()
simulation_study(snr= 5, N=5)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
read_real_data("right")
read_real_data("right")$data_ready
library(CoFA)
getwd()
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
getwd()
data_application(which_ear = "right", num_knot = 12:15)
read_real_data("right")$data_ready
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
read_real_data("right")$data_ready
data_application(which_ear = "right", num_knot = 12:15)
simulation_study(snr= 5, N=5)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
read_real_data("right")$data_ready
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
read_real_data("right")$data_ready
read_real_data(which_ear = "right")$data_ready
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
data_application(which_ear = "right", num_knot = 12:15)
library(CoFA)
getwd()
data_application()
gam_application()
library(CoFA)
getwd()
gam_application()
library(CoFA)
gam_application()
getwd()
getwd()
load("gam_application_right.rda")
load("gam_application_right.RData")
record_mat_right
getwd()
#load("gam_application_right.RData")
logistic_res_right <- logistic_application()
library(CoFA)
#load("gam_application_right.RData")
logistic_res_right <- logistic_application()
library(CoFA)
library(CoFA)
#load("gam_application_right.RData")
logistic_res_right <- logistic_application()
library(CoFA)
getwd()
setwd("C:/Users/jgong")
getwd()
setwd("C:/Users/jgong/Documents")
# data_res <-  data_application(which_ear = "left")
# gam_result <- gam_application(which_ear = "left")
logistic_result <- logistic_application(which_ear = "right", num_rep = 1000)
logistic_result$auc_mean_mat
colMeans(logistic_result$auc_mean_mat)
data_res <-  data_application(which_ear = "left")
# data_res <-  data_application(which_ear = "left")
gam_result <- gam_application(which_ear = "left")
gam_result$record_mat
rm(list=ls())
load("gam_application_left.RData")
record_mat_left
getwd()
rm(list=ls())
load("real_data_app_left.RData")
library(CoFA)
getwd()
#setwd("C:/Users/jgong")
data_res <-  data_application(which_ear = "left")
load("gam_app_left.RData")
load("gam_application_left.RData")
record_mat_left
rm(list=ls())
load("real_data_app.RData")
load("real_data_app_left.RData")
blup_mat <- as.matrix(results_list[[1]]$Blup_pred_M3)
dim(blup_mat)
blup_mat <- as.matrix(results_list[[1]]$Blup_pred_com)
dim(blup_mat)
# 1. Functional  only
scores_functional <- results_list[[i]]$fit_face$scores[,1:3]
i <- 1
# 1. Functional  only
scores_functional <- results_list[[i]]$fit_face$scores[,1:3]
head(scores_functional)
library(CoFA)
getwd()
setwd("C:/Users/jgong/Documents")
data_res <-  data_application(which_ear = "right")
gam_result <- gam_application(which_ear = "right")
logistic_result <- logistic_application(which_ear = "right", num_rep = 1000)
load("sim_results.RData")
###### Parameter Setting #############
#set.seed(12345)
# bad 12
# 1.277444 4.271101 4.770487
# Good 12345
# 3.883616 4.503093 4.043929
N <- 1000
for(s in 1:3){
print(table(results_final_1[[s]][[N+1]]$est_K0))
}
for(s in 1:3){
print(mean(rowSums(results_final[[s]][[N+1]]$cross_ise_trueK0_2) / sum(true_cross_vec)  ))
}
for(s in 1:3){
print(
round(
median(rowSums(results_final[[s]][[N+1]]$cross_ise_estK0_2) / sum(true_cross_vec)  ),
3)
)
}
for(s in 1:3){
print(table(results_final[[s]][[N+1]]$est_K0))
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$ise_mat[results_final[[s]][[N+1]]$est_K0!=1, ],2, median),
3)
)
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$ise_mat[results_final[[s]][[N+1]]$est_K0!=1, ],2, IQR) ,
3)
)
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$se_mat[results_final[[s]][[N+1]]$est_K0!=1, ],2, median) ,
3)
)
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$se_mat[results_final[[s]][[N+1]]$est_K0!=1, ],2, IQR),
3)
)
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$ise1_mat,2, median) ,
3)
)
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$ise1_mat,2, IQR) ,
3)
)
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$se1_mat,2, median) ,
3)
)
}
for(s in 1:3){
print(
round(
apply( results_final[[s]][[N+1]]$se1_mat,2, IQR) ,
3)
)
}
##### New cross cov performance measure
true_cross_cov_sqrd <- function(cross_s,c_true=K0, z_p=p_loop){
est <- 0
for(k in 1:c_true){
add <- as.numeric( beta_k[k] * lambdas[1+2*(k-1)] * phi_k0(k, cross_s) ) * V_mat[z_p,k]
est <- est+add
}
sqrd <- est^2
return(sqrd)
}
true_cross_vec <- rep(0,p)
for(p_loop in 1:p){
true_cross_vec[p_loop] <- (stats::integrate(true_cross_cov_sqrd, lower=0, upper=1) )$value
}
for(s in 1:3){
print(mean(rowSums(results_final[[s]][[N+1]]$cross_ise_trueK0_2) / sum(true_cross_vec)  ))
}
for(s in 1:3){
print(
round(
median(rowSums(results_final[[s]][[N+1]]$cross_ise_estK0_2) / sum(true_cross_vec)  ),
3)
)
}
setwd("C:/Users/jgong/My_R_packages/CoFA/vignettes")
load("real_data_app_right.RData")
results_list[[1]]$Blup_pred_com
head(t(results_list[[1]]$Blup_pred_com))
score_common_new <- t( results_list[[i]]$Blup_pred_com )
i <- 1
score_common_new <- t( results_list[[i]]$Blup_pred_com )
score_functional_ind_new <- t( results_list[[i]]$Blup_pred_ind_func )
score_multivariate_ind_new <- t( results_list[[i]]$Blup_pred_ind_multi )
score_common_allInd_new <- cbind(score_common_new[,1:2], score_functional_ind_new[,1:2], score_multivariate_ind_new[,1:2])
score_common_new
len_results_list <- length(results_list)
len_results_list

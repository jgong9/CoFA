}
total_design <- rep(0,p)
for(i in 1:m){
total_design <- rbind(total_design, design_list[[i]] )
}
total_design <- total_design[-1,]
for(i in 1:K){
# seq_add <- seq(-1,-(n-i))
seq_add <- seq((n-i),1)
if(i==1){
seq_vec <- seq_add
} else {
seq_vec <- c(seq_vec, seq_add)
}
}
weight_vec <- rep(seq_vec, m)
beta_total_hat <- solve(t(total_design) %*% diag(weight_vec) %*% total_design) %*% t(total_design) %*% diag(weight_vec) %*%  rep(-1, dim(total_design)[1])
Y_hat <- matrix(0, m, n)
for(l in 1:p){
Y_hat <- Y_hat + beta_total_hat[l] * X_list[[l]]
}
loss_fnt_hat <- 0
for(i in 1:m){
summand <- sum( ( Y_mat[i, order(Y_hat[i,]) ] )[1:K] )
loss_fnt_hat <- loss_fnt_hat + summand
}
loss_over_K[K] <- loss_fnt_hat
}
loss_over_K
seq_vec
rep(seq_vec, m)
beta_total_hat
loss_over_K
loss_fnt
min(loss_fnt)
loss_over_K
total_design
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(1, 1, 1)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- total_design
# Set unequality signs
f.dir <- rep("<=", dim(total_design)[1])
# Set right hand side coefficients
f.rhs <- rep(0, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
# Set unequality signs
f.dir <- rep("<", dim(total_design)[1])
# Set right hand side coefficients
f.rhs <- rep(0, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
rep("<", dim(total_design)[1])
# Set right hand side coefficients
f.rhs <- rep(-0.00001, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Set unequality signs
f.dir <- rep("<=", dim(total_design)[1])
# Set right hand side coefficients
f.rhs <- rep(-0.00001, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
# Set right hand side coefficients
f.rhs <- rep(-1e-10, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
f.rhs
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
# Set right hand side coefficients
f.rhs <- rep(-1e-5, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Set right hand side coefficients
f.rhs <- rep(-1e-10, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
# Set right hand side coefficients
f.rhs <- rep(-1e-7, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Variables final values
beta_hat <- lp("max", f.obj, f.con, f.dir, f.rhs)$solution
# Variables final values
beta_total_hat <- lp("max", f.obj, f.con, f.dir, f.rhs)$solution
Y_hat <- matrix(0, m, n)
for(l in 1:p){
Y_hat <- Y_hat + beta_total_hat[l] * X_list[[l]]
}
loss_fnt_hat <- 0
for(i in 1:m){
summand <- sum( ( Y_mat[i, order(Y_hat[i,]) ] )[1:K] )
loss_fnt_hat <- loss_fnt_hat + summand
}
loss_fnt_hat
library(pracma)
C <- diag(1, 3); d <- c(1, 1, 1)
C <- diag(1, 3); d <- c(1, 1, 1)
A <- total_design
b <- rep(0, dim(total_design)[1])
quadprog(C, d, A, b)
library(quadprog)
quadprog()
install.packages("quadprog")
C <- diag(1, 3); d <- c(1, 1, 1)
A <- total_design
b <- rep(0, dim(total_design)[1])
quadprog()
quadprog(C, d, A, b)
a<-quadprog(C, d, A, b)
beta_total_hat <- a$xmin
Y_hat <- matrix(0, m, n)
for(l in 1:p){
Y_hat <- Y_hat + beta_total_hat[l] * X_list[[l]]
}
loss_fnt_hat <- 0
for(i in 1:m){
summand <- sum( ( Y_mat[i, order(Y_hat[i,]) ] )[1:K] )
loss_fnt_hat <- loss_fnt_hat + summand
}
loss_fnt_hat
K<-10
## ith row
p<- length(X_list)
design_list <- list()
for(i in 1:m){
order_row <- rep(0, n)
for(j in 1:n){
order_row[j] <- which(order_Y[i,] == j)
}
kth_origin<- matrix(NA, n,p)
for(j in 1:n){
for(l in 1:p){
kth_origin[j, l] <- X_list[[l]][ i , order_row[j] ]
}
}
for(k in 1:K){
iter <- n-k
for(l in 1:iter){
design_mat_add <- kth_origin[k, ] - kth_origin[(k+l), ]
if(k==1 & l==1){
design_mat <- design_mat_add
} else {
design_mat <- rbind(design_mat, design_mat_add)
}
}
}
design_list[[i]] <- design_mat
}
total_design <- rep(0,p)
for(i in 1:m){
total_design <- rbind(total_design, design_list[[i]] )
}
total_design <- total_design[-1,]
for(i in 1:K){
# seq_add <- seq(-1,-(n-i))
seq_add <- seq((n-i),1)
if(i==1){
seq_vec <- seq_add
} else {
seq_vec <- c(seq_vec, seq_add)
}
}
weight_vec <- rep(seq_vec, m)
# Set coefficients of the objective function
f.obj <- c(1, 1, 1)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- total_design
# Set unequality signs
f.dir <- rep("<=", dim(total_design)[1])
# Set right hand side coefficients
f.rhs <- rep(-1e-7, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Set right hand side coefficients
f.rhs <- rep(-0.000001, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
C <- diag(1, 3); d <- c(1, 1, 1)
A <- total_design
b <- rep(0, dim(total_design)[1])
a<-quadprog(C, d, A, b)
beta_total_hat <- a$xmin
quadprog(C, d, A, b)
beta_total_hat
c(Y_mat)
design_ols <- cbind(c(X1_mat), c(X2_mat), c(X3_mat))
Y_ols <- design_ols %*% solve(design_ols %*% t(design_ols)) %*% t(design_ols) %*% c(Y_mat)
design_ols
solve(design_ols %*% t(design_ols))
Y_mat
K<-10
## ith row
p<- length(X_list)
design_list <- list()
for(i in 1:m){
order_row <- rep(0, n)
for(j in 1:n){
order_row[j] <- which(order_Y[i,] == j)
}
kth_origin<- matrix(NA, n,p)
for(j in 1:n){
for(l in 1:p){
kth_origin[j, l] <- X_list[[l]][ i , order_row[j] ]
}
}
for(k in 1:K){
iter <- n-k
for(l in 1:iter){
design_mat_add <- kth_origin[k, ] - kth_origin[(k+l), ]
if(k==1 & l==1){
design_mat <- design_mat_add
} else {
design_mat <- rbind(design_mat, design_mat_add)
}
}
}
design_list[[i]] <- design_mat
}
total_design <- rep(0,p)
for(i in 1:m){
total_design <- rbind(total_design, design_list[[i]] )
}
total_design <- total_design[-1,]
for(i in 1:K){
# seq_add <- seq(-1,-(n-i))
seq_add <- seq((n-i),1)
if(i==1){
seq_vec <- seq_add
} else {
seq_vec <- c(seq_vec, seq_add)
}
}
# beta_total_hat <- solve(t(total_design) %*% diag(weight_vec) %*% total_design) %*% t(total_design) %*% diag(weight_vec) %*%  rep(-1, dim(total_design)[1])
beta_total_hat <- solve(t(total_design)  %*% total_design) %*% t(total_design)  %*%  rep(-1, dim(total_design)[1])
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(1, 1, 1)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- total_design
# Set unequality signs
f.dir <- rep("<=", dim(total_design)[1])
# Set right hand side coefficients
f.rhs <- rep(-0.000001, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
C <- diag(1, 3); d <- c(1, 1, 1)
A <- total_design
b <- rep(0, dim(total_design)[1])
quadprog()
quadprog(C, d, A, b)
Y_hat <- matrix(0, m, n)
for(l in 1:p){
Y_hat <- Y_hat + beta_total_hat[l] * X_list[[l]]
}
Y_hat
total_design %*% beta_total_hat
sum(total_design %*% beta_total_hat < 0 )
positive_vec <- (total_design %*% beta_total_hat > 0 )
X_beta_hat <-  total_design %*% beta_total_hat
positive_vec <- (X_beta_hat> 0 )
X_beta_hat[positive_vec ]
length(X_beta_hat)
Y_ols <- design_ols %*% solve(design_ols %*% t(design_ols)) %*% t(design_ols) %*% c(Z_optimal )
Z_optimal
X1_mat <- matrix(rnorm(100), 5,20)
X2_mat <- matrix(rnorm(100), 5,20)
X3_mat <- matrix(rnorm(100), 5,20)
Y_ols <- design_ols %*% solve(design_ols %*% t(design_ols)) %*% t(design_ols) %*% c(Z_optimal )
design_ols %*% t(design_ols)
loss_over_K
### 1. Data loading
## 1-a Reponses loading
set.seed(123)
Y_mat <-matrix(rnorm(100), 5,20)
m <- dim(Y_mat)[1]
n <- dim(Y_mat)[2]
## 1-b Optimal Z and K over all ordering (regardless of feasibility and covariates)
order_Y <- t(apply(Y_mat, 1, order))
Z_optimal <- matrix(NA, m, n)
for(i in 1:m){
Z_optimal[i, ]<- Y_mat[i, order_Y[i,]]
}
loss_fnt <- rep(NA, n)
for(j in 1:n){
loss_fnt[j] <- sum(Z_optimal[,1:j])
}
K_optimal <- which(loss_fnt == min(loss_fnt))
K_optimal_order <- order(loss_fnt, decreasing = F)
K_optimal
K_optimal_order
### 1. Data loading
## 1-a Reponses loading
set.seed(1234)
Y_mat <-matrix(rnorm(100), 5,20)
m <- dim(Y_mat)[1]
n <- dim(Y_mat)[2]
## 1-b Optimal Z and K over all ordering (regardless of feasibility and covariates)
order_Y <- t(apply(Y_mat, 1, order))
Z_optimal <- matrix(NA, m, n)
for(i in 1:m){
Z_optimal[i, ]<- Y_mat[i, order_Y[i,]]
}
loss_fnt <- rep(NA, n)
for(j in 1:n){
loss_fnt[j] <- sum(Z_optimal[,1:j])
}
K_optimal <- which(loss_fnt == min(loss_fnt))
K_optimal_order <- order(loss_fnt, decreasing = F)
## 1-c Covariates loading
set.seed(123)
X1_mat <- matrix(rnorm(100), m,n)
X2_mat <- matrix(rnorm(100), m,n)
X3_mat <- matrix(rnorm(100), m,n)
X_list <- list(X1_mat, X2_mat,X3_mat)
p<- length(X_list)
### 2. OLS with Z_optimal
design_ols <- cbind(c(X1_mat), c(X2_mat), c(X3_mat))
Y_ols <- design_ols %*% solve(design_ols %*% t(design_ols)) %*% t(design_ols) %*% c( Y_mat )
order_Y_ols <- t(apply(Y_ols, 1, order))
### 3. Order-based regression
## I assume K is given
K<-9
## 3-a Construction of the whole design matrix M == total_design
design_list <- list()
for(i in 1:m){
order_row <- rep(0, n)
for(j in 1:n){
order_row[j] <- which(order_Y[i,] == j)
}
coef_origin<- matrix(NA, n,p)
for(j in 1:n){
for(l in 1:p){
coef_origin[j, l] <- X_list[[l]][ i , order_row[j] ]
} # end of loop of l
} # end of loop of j
for(k in 1:K){
iter <- n-k
for(l in 1:iter){
design_mat_add <- coef_origin[k, ] - coef_origin[(k+l), ]
if(k==1 & l==1){
design_mat <- design_mat_add
} else {
design_mat <- rbind(design_mat, design_mat_add)
}
} # end of loop of l
} # end of loop of k
design_list[[i]] <- design_mat
} # end of loop of i
total_design <- rep(0,p)
for(i in 1:m){
total_design <- rbind(total_design, design_list[[i]] )
}
total_design <- total_design[-1,]
## 3-b Linear programming
library(lpSolve)
# Set coefficients of the objective function
f.obj <- c(1, 1, 1)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- total_design
# Set unequality signs
f.dir <- rep("<=", dim(total_design)[1])
# Set right hand side coefficients
f.rhs <- rep(-0.000001, dim(total_design)[1])
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs)
# Variables final values
beta_linear_hat <- lp("max", f.obj, f.con, f.dir, f.rhs)$solution
## 3-c Quadratic programming
library(pracma)
library(quadprog)
C <- diag(1, 3); d <- c(1, 1, 1)
A <- total_design
b <- rep(0, dim(total_design)[1])
quadprog()
quadprog(C, d, A, b)
quadprog(C, d, A, b)
beta_quad_hat <- quad_sol$xmin
quad_sol <- quadprog(C, d, A, b)
beta_quad_hat <- quad_sol$xmin
## 3-d OLS approach
beta_total_hat <- solve(t(total_design)  %*% total_design) %*% t(total_design)  %*%  rep(-1, dim(total_design)[1])
Y_hat <-  total_design %*% beta_total_hat
loss_fnt_hat <- 0
for(i in 1:m){
summand <- sum( ( Y_mat[i, order(Y_hat[i,]) ] )[1:K] )
loss_fnt_hat <- loss_fnt_hat + summand
}
loss_fnt_hat
beta_total_hat
Y_hat
loss_fnt_hat <- 0
for(i in 1:m){
summand <- sum( ( Y_mat[i, order(Y_hat[i,]) ] )[1:K] )
loss_fnt_hat <- loss_fnt_hat + summand
}
loss_fnt_hat
loss_fnt_hat <- 0
for(i in 1:m){
ith_order <- order(Y_hat[i,])
summand <- sum( ( Y_mat[i, ith_order ] )[1:K] )
loss_fnt_hat <- loss_fnt_hat + summand
}
loss_fnt_hat
Y_mat
ith_order
Y_hat
beta_total_hat
total_design
### 2. OLS with Z_optimal
design_ols <- cbind(c(X1_mat), c(X2_mat), c(X3_mat))
beta_ols <- solve(design_ols %*% t(design_ols)) %*% t(design_ols) %*% c( Y_mat )
## 3-d OLS approach
beta_total_hat <- solve(t(total_design)  %*% total_design) %*% t(total_design)  %*%  rep(-1, dim(total_design)[1])
Y_hat_order <- matrix(0, m, n)
for(l in 1:p){
Y_hat_order <- Y_hat_order + beta_total_hat[l] * X_list[[l]]
}
order_Y_order <- t(apply(Y_hat_order, 1, order))
order_objective <- 0
for(i in 1:m){
summand <- sum( Y_mat[i, (order_Y_order[i,])[1:K] ] )
order_objective <- order_objective + summand
}
order_objective
loss_fnt
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::install()
devtools::build(binary = TRUE)
load("C:/Users/jgong/My_R_packages/CoFA/.RData")
devtools::build(binary = TRUE)
